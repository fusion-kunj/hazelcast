name: Build and Dockerize

on:
  workflow_dispatch:

jobs:
  build:
    name: Build Jar's And Docker Images
    runs-on: self-hosted
    
    steps:
     
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{steps.decide-ref.outputs.ref}}
          path: "hazelcast"

      - name: Read Java Config
        run: cat hazelcast/.github/java-config.env >> $GITHUB_ENV
  
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          architecture: x64
          cache: "maven"

      - name: Setup Local Maven Cache
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build hazelcast jar
        working-directory: hazelcast
        run: |
          HAZELCAST_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "HAZELCAST_VERSION=${HAZELCAST_VERSION}" >> $GITHUB_ENV
          ./mvnw -T 4 -B -V -e clean install --activate-profiles quick
          cp hazelcast/target/hazelcast-*-SNAPSHOT.jar ${GITHUB_WORKSPACE}/auto-discovery-test-suite/terraform/tools/hazelcast.jar

      - name: Build client jar
        working-directory: auto-discovery-test-suite/terraform/tools/client
        run: |
          mvn versions:set-property -Dproperty=hazelcast.version -DnewVersion=$HAZELCAST_VERSION
          mvn clean package
          mv target/aws-discovery-client.jar aws-discovery-client.jar

      - name: Upload hazelcast.jar
        uses: actions/upload-artifact@v4
        with:
          name: hazelcast.jar
          path: auto-discovery-test-suite/terraform/tools/hazelcast.jar

      - name: Build Hazelcast Image
        id: get-hz-image-tag
        working-directory: auto-discovery-test-suite/terraform/tools
        run: |
          HZ_IMG="${{ env.GAR_REGION }}-docker.pkg.dev/${{ env.GAR_PROJECT_ID }}/${{ env.GAR_REPO }}/$(uuidgen):3d"
          echo "HZ_IMG=${HZ_IMG}" >> $GITHUB_OUTPUT
          docker build -f Dockerfile -t ${HZ_IMG} .
          docker push ${HZ_IMG}

      - name: Build Client Image
        id: get-cl-image-tag
        working-directory: auto-discovery-test-suite/terraform/tools/client
        run: |
          CL_IMG="${{ env.GAR_REGION }}-docker.pkg.dev/${{ env.GAR_PROJECT_ID }}/${{ env.GAR_REPO }}/$(uuidgen):3d"
          echo "CL_IMG=${CL_IMG}" >> $GITHUB_OUTPUT
          docker build -f Dockerfile -t ${CL_IMG} .
          docker push ${CL_IMG}
